@page "/components/button"

<PageOutlet Url="components/button"
            Title="Button"
            Description="Button component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Button"
               ComponentDescription="Buttons empower users to effortlessly interact with your application, enabling them to take actions and make decisions with a simple tap."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" Id="example1">
        <ExamplePreview>
            <div>
                The Button offers three style options: primary (default), standard, and text.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton>Primary</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard">Standard</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Text">Text</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    <ComponentExampleBox Title="Primary Button" RazorCode="@example2RazorCode" Id="example2">
        <ExamplePreview>
            <div>
                Primary buttons are attention-grabbing, featuring elevation and a filled appearance. They're designed for essential actions at the core of your application.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton>Primary</BitButton>
                <BitButton IsEnabled="false">Disabled</BitButton>
                <BitButton Href="https://bitplatform.dev">Link</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    <ComponentExampleBox Title="Standard Button" RazorCode="@example3RazorCode" Id="example3">
        <ExamplePreview>
            <div>
                Standard buttons offer a moderate level of emphasis, suitable for important actions that aren't central to the application. They serve as a middle ground between text buttons and the more prominent primary buttons, providing flexibility in emphasis.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton ButtonStyle="BitButtonStyle.Standard">Standard</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard" IsEnabled="false">Disabled</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard" Href="https://bitplatform.dev">Link</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    <ComponentExampleBox Title="Text Button" RazorCode="@example4RazorCode" Id="example4">
        <ExamplePreview>
            <div>
                Text buttons are best suited for understated actions, serving as a less prominent choice in various interface elements.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton ButtonStyle="BitButtonStyle.Text">Text</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Text" IsEnabled="false">Disabled</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Text" Href="https://bitplatform.dev">Link</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    <ComponentExampleBox Title="Handling clicks" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
        <ExamplePreview>
            <div>
                Managing button click events.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton OnClick="() => clickCounter++">Click me (@clickCounter)</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    
    <ComponentExampleBox Title="Colors" RazorCode="@example6RazorCode" Id="example6">
        <ExamplePreview>
            <div>
                Offering a range of specialized color variants, providing visual cues for specific actions or states within your application.
            </div>
            <br />
            <div class="buttons-container-grid">
                <div>
                    <BitButton Color="BitButtonColor.Info">Info</BitButton>
                    <BitButton Color="BitButtonColor.Info" ButtonStyle="BitButtonStyle.Standard">Info</BitButton>
                    <BitButton Color="BitButtonColor.Info" ButtonStyle="BitButtonStyle.Text">Info</BitButton>
                </div>
                <div>
                    <BitButton Color="BitButtonColor.Success">Success</BitButton>
                    <BitButton Color="BitButtonColor.Success" ButtonStyle="BitButtonStyle.Standard">Success</BitButton>
                    <BitButton Color="BitButtonColor.Success" ButtonStyle="BitButtonStyle.Text">Success</BitButton>
                </div>
                <div>
                    <BitButton Color="BitButtonColor.Warning">Warning</BitButton>
                    <BitButton Color="BitButtonColor.Warning" ButtonStyle="BitButtonStyle.Standard">Warning</BitButton>
                    <BitButton Color="BitButtonColor.Warning" ButtonStyle="BitButtonStyle.Text">Warning</BitButton>
                </div>
                <div>
                    <BitButton Color="BitButtonColor.SevereWarning">SevereWarning</BitButton>
                    <BitButton Color="BitButtonColor.SevereWarning" ButtonStyle="BitButtonStyle.Standard">SevereWarning</BitButton>
                    <BitButton Color="BitButtonColor.SevereWarning" ButtonStyle="BitButtonStyle.Text">SevereWarning</BitButton>
                </div>
                <div>
                    <BitButton Color="BitButtonColor.Error">Error</BitButton>
                    <BitButton Color="BitButtonColor.Error" ButtonStyle="BitButtonStyle.Standard">Error</BitButton>
                    <BitButton Color="BitButtonColor.Error" ButtonStyle="BitButtonStyle.Text">Error</BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    <ComponentExampleBox Title="Sizes" RazorCode="@example7RazorCode" Id="example7">
        <ExamplePreview>
            <div>
                Varying sizes for buttons tailored to meet diverse design needs, ensuring flexibility and visual hierarchy within your interface.
            </div>
            <br />
            <div class="buttons-container-grid">
                <div>
                    <BitButton Size="BitButtonSize.Small" ButtonStyle="BitButtonStyle.Primary">Small</BitButton>
                    <BitButton Size="BitButtonSize.Medium" ButtonStyle="BitButtonStyle.Primary">Medium</BitButton>
                    <BitButton Size="BitButtonSize.Large" ButtonStyle="BitButtonStyle.Primary">Large</BitButton>
                </div>
                <div>
                    <BitButton Size="BitButtonSize.Small" ButtonStyle="BitButtonStyle.Standard">Small</BitButton>
                    <BitButton Size="BitButtonSize.Medium" ButtonStyle="BitButtonStyle.Standard">Medium</BitButton>
                    <BitButton Size="BitButtonSize.Large" ButtonStyle="BitButtonStyle.Standard">Large</BitButton>
                </div>
                <div>
                    <BitButton Size="BitButtonSize.Small" ButtonStyle="BitButtonStyle.Text">Small</BitButton>
                    <BitButton Size="BitButtonSize.Medium" ButtonStyle="BitButtonStyle.Text">Medium</BitButton>
                    <BitButton Size="BitButtonSize.Large" ButtonStyle="BitButtonStyle.Text">Large</BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" RazorCode="@example8RazorCode" Id="example8">
        <ExamplePreview>
            <div>
                Empower customization by overriding default styles and classes, allowing tailored design modifications to suit specific UI requirements.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton Style="color:darkblue; font-weight:bold">
                    Styled Button
                </BitButton>
                <BitButton Class="custom-class" ButtonStyle="BitButtonStyle.Standard">
                    Classed Button
                </BitButton>
                <BitButton Class="custom-class" Style="color:green;" ButtonStyle="BitButtonStyle.Text">
                    Styled Classed Button
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" RazorCode="@example9RazorCode" Id="example9">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible: [ <BitButton Visibility="BitVisibility.Visible">Visible Button</BitButton> ]</div>
                <div>Hidden: [ <BitButton Visibility="BitVisibility.Hidden">Hidden Button</BitButton> ]</div>
                <div>Collapsed: [ <BitButton Visibility="BitVisibility.Collapsed">Collapsed Button</BitButton> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom content" RazorCode="@example10RazorCode" Id="example10">
        <ExamplePreview>
            <div>
                Here are some examples of customizing the button content.
            </div>
            <br />
            <div class="buttons-container">
                <BitButton Class="custom-content">
                    <BitIcon IconName="@BitIconName.Airplane"/>
                    <span>A Primary custom content</span>
                    <BitRippleLoading Size="20"/>
                </BitButton>

                <BitButton Class="custom-content" ButtonStyle="BitButtonStyle.Standard">
                    <BitIcon IconName="@BitIconName.Accept"/>
                    <span>A Standard custom content</span>
                    <BitRollerLoading Size="20"/>
                </BitButton>

                <BitButton Class="custom-content" ButtonStyle="BitButtonStyle.Text">
                    <BitIcon IconName="@BitIconName.Asterisk"/>
                    <span>A Text custom content</span>
                    <BitHeartLoading Size="20"/>
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Button Type" RazorCode="@example11RazorCode" CsharpCode="@example11CsharpCode" Id="example11">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="buttonValidationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="buttonValidationModel.RequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.RequiredText" />
                        <br />
                        <BitTextField Label="Non Required" @bind-Value="buttonValidationModel.NonRequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.NonRequiredText" />
                        <br />
                        <div>
                            <BitButton ButtonType="BitButtonType.Submit">Submit</BitButton>
                            <BitButton ButtonType="BitButtonType.Reset">Reset</BitButton>
                            <BitButton ButtonType="BitButtonType.Button">Button</BitButton>
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form submitted successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    private int clickCounter;

    private bool formIsValidSubmit;
    private ButtonValidationModel buttonValidationModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        buttonValidationModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}