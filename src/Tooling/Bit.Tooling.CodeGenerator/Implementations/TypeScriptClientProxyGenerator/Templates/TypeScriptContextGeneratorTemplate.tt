<#@ template language="C#" #>
<#@ parameter type="System.Collections.Generic.IList<DtoController>" name="Controllers" #>
<#@ parameter type="Bit.Tooling.Core.Model.BitCodeGeneratorMapping" name="Mapping" #>
<#@ import namespace="Bit.Tooling.Core.Model" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="System.Linq" #>

<# foreach (DtoController controller in Controllers) { #>
    <#= controller.ControllerSymbol.GetDocumentationSummary() #>
	interface <#= $"{controller.Name}EntitySet" #> extends $data.EntitySet<<#= controller.ModelSymbol.ToDisplayString() #>>{
		<# foreach (ODataOperation operation in controller.Operations)
		{ #>
		    <#= operation.Method.GetDocumentationSummary() #>
		    <#= operation.Method.Name.AsCamelCase() #>(<#= string.Join(",",operation.Parameters.Select(parameter =>  $@"{parameter.Name} : {parameter.Type.GetTypescriptTypeName(useArrayForIEnumerableTypes : true)}" )) #>): <# if(!operation.Method.ReturnType.IsVoid()) { #> <#= operation.Method.ReturnType.IsCollectionType() ? operation.Method.ReturnType.GetTypescriptTypeName(useArrayForIEnumerableTypes:false) : "Promise<" + operation.Method.ReturnType.GetTypescriptTypeName(useArrayForIEnumerableTypes:false) + ">" #> <# } else { #> Promise<void> <# } #>;
		<# } #>
	}
<#}#>

declare class <#= Mapping.Route #>Context extends $data.EntityContext {

	<# foreach (DtoController controller in Controllers) { #>
	    <#= controller.ControllerSymbol.GetDocumentationSummary() #>
		<#= controller.Name.AsCamelCase() #>: <#= controller.Name #>EntitySet;
	<#}#>

}

<# foreach (NamespaceAlias namespaceAlias in Mapping.NamespaceAliases) { #>
	import <#= namespaceAlias.Alias #> = <#= namespaceAlias.Namespace #>;
<#}#>