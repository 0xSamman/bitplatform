<#@ template language="C#" #>
<#@ parameter type="System.Collections.Generic.IList<DtoController>" name="Controllers" #>
<#@ parameter type="Bit.Tooling.Core.Model.BitCodeGeneratorMapping" name="Mapping" #>
<#@ import namespace="Bit.Tooling.Core.Model" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>

<#= Mapping.Route #>Context = $data.EntityContext.extend("<#= Mapping.Route #>Context", {
	<# foreach (DtoController controller in Controllers) { #>
		<#= controller.Name.AsCamelCase() #> : {
			"type": "$data.EntitySet",
			"elementType": "<#= controller.ModelSymbol.ToDisplayString() #>",
			<# if (controller.Operations.Any())
			{ #>
				"actions": {
						<# foreach (ODataOperation operation in controller.Operations)
						{ #>
							"<#= operation.Method.Name.AsCamelCase() #>": {
								"type": "<#= operation.Kind == ODataOperationKind.Action ? "$data.ServiceAction" : "$data.ServiceFunction" #>",
								<# if (string.IsNullOrWhiteSpace(Mapping.Namespace)) { #>
									"namespace": null,
								<# } else { #>
									"namespace": "<#= Mapping.Namespace #>",
								<# } #>
								"returnType": <# if(!operation.Method.ReturnType.IsVoid()) { #> "<#= operation.Method.ReturnType.GetEdmTypeName(TypeToEdmTypeCollectionBehavior.UseJayDataNonGenericQueryable) #>" <# } else { #> null <# } #>,
								<# if (operation.Method.ReturnType.IsCollectionType() || operation.Method.ReturnType.IsQueryableType())
								{
									#> "elementType": "<#= (operation.Method.ReturnType).GetEdmElementTypeName() #>", 
								<# } #>
									"params": [
										<# foreach (ODataOperationParameter parameter in operation.Parameters)
										{ #>
											{
												"name": "<#= parameter.Name #>",
												"type": "<#= parameter.Type.GetEdmTypeName(TypeToEdmTypeCollectionBehavior.UseArray) #>",
												<# if(parameter.Type.IsCollectionType()) { #> "elementType": "<#= (parameter.Type).GetEdmElementTypeName() #>" <# } #>
											},									
										<# } #>
									]
						},
						<# } #>
				}
			<# } #>
		},
	<#}#>
});

<# foreach (NamespaceAlias namespaceAlias in Mapping.NamespaceAliases) { #>
	<#= namespaceAlias.Alias #> = <#= namespaceAlias.Namespace #>;
<#}#>