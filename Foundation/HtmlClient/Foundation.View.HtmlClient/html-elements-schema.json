[
  {
    "name": "rad-combo",
    "attributes": [
      {
        "name": "rad-text",
        "description": "You can bind rad text, so combo box will show binded data instead of loading data, until user opens it."
      },
      {
        "name": "rad-datasource",
        "description": "Bind this to kendo data source you've in view model."
      },
      {
        "name": "rad-value-field-name",
        "description": "Property of dto to be assigned into ng-model when user selects."
      },
      {
        "name": "rad-text-field-name",
        "description": "Property of dto to be displayed to user. It can be overrided using item-template. Note that this field will be used for filtering when user searchs in combo box."
      },
      {
        "name": "rad-virtual-entity-loader",
        "description": "Bind this to a method which accepts args : { id : any } to enable Data|UI virtualiztion whenever you've large sets of data. At that function you should return a promise, which resolves into an entity with that id."
      },
      {
        "name": "rad-on-init",
        "description": "Bind this to a method which accepts args : { comboBoxOptions: comboBoxOptions }. You can customize all aspects of your combo box there."
      },
      {
        "name": "k-placeholder",
        "description": "The hint displayed by the widget when it is empty."
      },
      {
        "name": "k-min-length",
        "description": "The minimum number of characters the user must type before a search is performed. Set to higher value than 1 if the search could match a lot of items."
      },
      {
        "name": "k-clear-button",
        "description": "Unless this options is set to false, a button will appear when hovering the widget."
      },
      {
        "name": "k-enable",
        "description": "If set to false the widget will be disabled and will not allow user input."
      },
      {
        "name": "k-filter",
        "description": "The filtering method used to determine the suggestions for the current value.",
        "type": "enum",
        "values": [
          "'contains'",
          "'startswith'",
          "'endswith'"
        ]
      },
      {
        "name": "k-ignore-case",
        "description": "If set to false case-sensitive search will be performed to find suggestions. The widget performs case-insensitive searching by default."
      }
    ]
  },
  {
    "name": "rad-grid",
    "attributes": [
      {
        "name": "rad-datasource",
        "description": "Bind this to kendo data source you've in view model."
      },
      {
        "name": "rad-on-init",
        "description": "Bind this to a method which accepts args : { gridOptions: gridOptions }. You can customize all aspects of your data grid there."
      },
      {
        "name": "k-navigatable",
        "description": "If set to true the use could navigate the widget using the keyboard navigation."
      },
      {
        "name": "k-reorderable",
        "description": "If set to true the user could reorder the columns by dragging their header cells. Multi-level headers allow reordering only in same level."
      },
      {
        "name": "k-resizable",
        "description": "If set to true, users can resize columns by dragging the edges (resize handles) of their header cells. Users can also auto-fit a column by double-clicking its resize handle. In this case the column will assume the smallest possible width, which allows the column content to fit without wrapping."
      },
      {
        "name": "k-sortable",
        "description": "If set to true the user could sort the grid by clicking the column header cells."
      }
    ]
  },
  {
    "name": "ng-outlet",
    "description": "The directive that identifies where the Router should render its Components."
  },
  {
    "name": "a",
    "attributes": [
      {
        "name": "ng-link",
        "description": "<a ng-link=\"[ 'ViewModelName' , { arg1 : 'value' }]\">Title</a> for binding a clickable HTML element to a route, via a Link Parameters Array."
      }
    ]
  },
  {
    "name": "persian-date-picker",
    "description": "This Date picker work with solar based calendar. It accepts ng-model. To configure date or date/time see is-date-time attribute.",
    "attributes": [
      {
        "name": "is-date-time",
        "values": [
          "true",
          "false"
        ],
        "type": "boolean",
        "description": "Show/accept date or date time. default: false >> date only."
      }
    ]
  },
  {
    "name": "dto-form",
    "description": "Use dto-form instead of ng-form when you're working wit dto. It requires ng-model. <dto-form name='customerForm' ng-model='...'></dto-form>"
  },
  {
    "name": "error-messages",
    "description": "Shows errors to user. <error-messages field='customerForm.LastName'><div ng-message='required'>Last name is required</div><error-messages>",
    "attributes": [
      {
        "name": "field",
        "description": "Set this to formName.fieldName you're going to show its errors. for example customerForm.LastName"
      }
    ]
  },
  {
    "name": "element-mover",
    "description": "Set element-selector and predicate. Whenever predicate resolves into true, it will move element into this element-mover",
    "attributes": [
      {
        "name": "predicate",
        "description": "For example vm.x == true"
      },
      {
        "name": "element-selector",
        "description": "For example #someElement"
      }
    ]
  },
  {
    "name": "md-button",
    "description": "<md-button> is a button directive with optional ink ripples (default enabled). If you supply a href or ng-href attribute, it will become an <a> element. Otherwise, it will become a <button> element.",
    "attributes": [
      {
        "name": "md-no-ink",
        "type": "boolean",
        "description": "If present, disable ripple ink effects.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-ripple-size",
        "description": "Overrides the default ripple size logic.",
        "type": "enum",
        "values": [
          "full",
          "partial",
          "auto"
        ]
      }
    ]
  },
  {
    "name": "md-autocomplete",
    "description": "<md-autocomplete> is a special input component with a drop-down of all possible matches to a custom query.",
    "attributes": [
      {
        "name": "md-items",
        "description": "An expression in the format of item in results to iterate over matches for your search.The results expression can be also a function, which returns the results synchronously or asynchronously (per Promise)."
      },
      {
        "name": "md-selected-item-change",
        "description": "An expression to be run each time a new item is selected."
      },
      {
        "name": "md-search-text-change",
        "description": "An expression to be run each time the search text updates."
      },
      {
        "name": "md-search-text",
        "description": "A model to bind the search query text to."
      },
      {
        "name": "md-selected-item",
        "description": "A model to bind the selected item to."
      },
      {
        "name": "md-item-text",
        "description": "An expression that will convert your object to a single string."
      },
      {
        "name": "md-no-cache",
        "type": "boolean",
        "description": "Disables the internal caching that happens in autocomplete.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-require-match",
        "type": "boolean",
        "description": "When set to true, the autocomplete will add a validator, which will evaluate to false, when no item is currently selected.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-min-length",
        "type": "number",
        "description": "Specifies the minimum length of text before autocomplete will make suggestions."
      },
      {
        "name": "md-delay",
        "type": "number",
        "description": "Specifies the amount of time (in milliseconds) to wait before looking for results."
      },
      {
        "name": "md-clear-button",
        "type": "boolean",
        "description": "Whether the clear button for the autocomplete input should show up or not.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-autofocus",
        "type": "boolean",
        "description": "If true, the autocomplete will be automatically focused when a $mdDialog, $mdBottomsheet or $mdSidenav, which contains the autocomplete, is opening.Also the autocomplete will immediately focus the input element.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-no-asterisk",
        "type": "boolean",
        "description": "When present, asterisk will not be appended to the floating label.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-autoselect",
        "type": "boolean",
        "description": "If set to true, the first item will be automatically selected in the dropdown upon open.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-menu-class",
        "description": "This will be applied to the dropdown menu for styling."
      },
      {
        "name": "md-floating-label",
        "description": "This will add a floating label to autocomplete and wrap it in md-input-container."
      },
      {
        "name": "md-input-name",
        "description": "The name attribute given to the input element to be used with FormController."
      },
      {
        "name": "md-select-on-focus",
        "description": "When present the inputs text will be automatically selected on focus."
      },
      {
        "name": "md-input-id",
        "description": "An ID to be added to the input element."
      },
      {
        "name": "md-input-minlength",
        "type": "number",
        "description": "The minimum length for the input's value for validation."
      },
      {
        "name": "md-input-maxlength",
        "type": "number",
        "description": "The maximum length for the input's value for validation."
      },
      {
        "name": "md-select-on-match",
        "type": "boolean",
        "description": "When set, autocomplete will automatically select exact the item if the search text is an exact match.Exact match means that there is only one match showing up.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-match-case-insensitive",
        "type": "boolean",
        "description": "When set and using md-select-on-match, autocomplete will select on case-insensitive match.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-escape-options",
        "type": "enum",
        "description": "Override escape key logic. Default is blur clear.",
        "values": [
          "blur",
          "clear",
          "none"
        ]
      },
      {
        "name": "md-dropdown-items",
        "description": "Specifies the maximum amount of items to be shown in the dropdown.When the dropdown doesn't fit into the viewport, the dropdown will shrink as less as possible.."
      },
      {
        "name": "md-dropdown-position",
        "type": "enum",
        "description": "Overrides the default dropdown position",
        "values": [
          "bottom",
          "top"
        ]
      }
    ]
  },
  {
    "name": "md-calendar",
    "description": "<md-calendar> is a component that renders a calendar that can be used to select a date. It is a part of the <md-datepicker> pane, however it can also be used on it's own.",
    "attributes": [
      {
        "name": "md-min-date",
        "description": "Expression representing the minimum date."
      },
      {
        "name": "md-max-date",
        "description": "Expression representing the maximum date."
      },
      {
        "name": "md-date-filter",
        "description": "Function expecting a date and returning a boolean whether it can be selected or not."
      }
    ]
  },
  {
    "name": "md-checkbox",
    "attributes": [
      {
        "name": "name",
        "description": "Property name of the form under which the control is published."
      },
      {
        "name": "md-no-ink ",
        "description": "Use of attribute indicates use of ripple ink effects.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "aria-label",
        "description": "Adds label to checkbox for accessibility. Defaults to checkbox's text. If no default text is found, a warning will be logged."
      },
      {
        "name": "md-indeterminate",
        "description": "This determines when the checkbox should be rendered as 'indeterminate'. If a truthy expression or no value is passed in the checkbox renders in the md-indeterminate state. If falsy expression is passed in it just looks like a normal unchecked checkbox. The indeterminate, checked, and unchecked states are mutually exclusive. A box cannot be in any two states at the same time. Adding the 'md-indeterminate' attribute overrides any checked/unchecked rendering logic. When using the 'md-indeterminate' attribute use 'ng-checked' to define rendering logic instead of using 'ng-model'."
      }
    ]
  },
  {
    "name": "md-chip",
    "description": "<md-chip> is a component used within <md-chips> and is responsible for rendering individual chips."
  },
  {
    "name": "md-chips",
    "description": "<md-chips> is an input component for building lists of strings or objects. The list items are displayed as 'chips'. This component can make use of an <input> element or an <md-autocomplete> element.",
    "attributes": [
      {
        "name": "md-transform-chip",
        "description": "An expression of form myFunction($chip) that when called expects one of the following return values:an object representing the $chip input string undefined to simply add the $chip input string, or null to prevent the chip from being appended."
      },
      {
        "name": "md-require-match",
        "description": "If true, and the chips template contains an autocomplete, only allow selection of pre-defined chips (i.e. you cannot add new ones).",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-removable",
        "description": "Enables or disables the deletion of chips through the removal icon or the Delete/Backspace key. Defaults to true.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "readonly",
        "description": "Disables list manipulation (deleting or adding list items), hiding the input and delete buttons. If no ng-model is provided, the chips will automatically be marked as readonly.When md-removable is not defined, the md-remove behavior will be overwritten and disabled.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-enable-chip-edit",
        "description": "Set this to true to enable editing of chip contents. The user can go into edit mode with pressing space, enter, or double clicking on the chip. Chip edit is only supported for chips with basic template."
      },
      {
        "name": "md-max-chips",
        "description": "The maximum number of chips allowed to add through user input.The validation property md-max-chips can be used when the max chips amount is reached.",
        "type": "number"
      },
      {
        "name": "md-add-on-blur",
        "description": "When set to true, remaining text inside of the input will be converted into a new chip on blur.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-on-add",
        "description": "An expression which will be called when a chip has been added."
      },
      {
        "name": "md-on-remove",
        "description": "An expression which will be called when a chip has been removed."
      },
      {
        "name": "md-on-select",
        "description": "An expression which will be called when a chip is selected."
      },
      {
        "name": "input-aria-label",
        "description": "A string read by screen readers to identify the input."
      },
      {
        "name": "container-hint",
        "description": "A string read by screen readers informing users of how to navigate the chips. Used in readonly mode."
      },
      {
        "name": "delete-button-label",
        "description": "A label for the delete button. Also hidden and read by screen readers."
      },
      {
        "name": "md-separator-keys",
        "description": "An array of key codes used to separate chips."
      },
      {
        "name": "md-chip-append-delay",
        "description": "The number of milliseconds that the component will select a newly appended chip before allowing a user to type into the input. This is necessary for keyboard accessibility for screen readers. It defaults to 300ms and any number less than 300 can cause issues with screen readers (particularly JAWS and sometimes NVDA)."
      }
    ]
  },
  {
    "name": "md-contact-chips",
    "description": "<md-contact-chips> is an input component based on md-chips and makes use of an md-autocomplete element. The component allows the caller to supply a query expression which returns a list of possible contacts.",
    "attributes": [
      {
        "name": "md-contacts",
        "description": "An expression expected to return contacts matching the search test, $query. If this expression involves a promise, a loading bar is displayed while waiting for it to resolve."
      },
      {
        "name": "md-contact-name",
        "description": "The field name of the contact object representing the contact's name."
      },
      {
        "name": "md-contact-email",
        "description": "The field name of the contact object representing the contact's email address."
      },
      {
        "name": "md-contact-image",
        "description": "The field name of the contact object representing the contact's image."
      },
      {
        "name": "md-min-length",
        "description": "Specifies the minimum length of text before autocomplete will make suggestions.",
        "type": "number"
      },
      {
        "name": "filter-selected",
        "description": "Whether to filter selected contacts from the list of suggestions shown in the autocomplete."
      }
    ]
  },
  {
    "name": "md-content",
    "description": "The <md-content> directive is a container element useful for scrollable content. It achieves this by setting the CSS overflow property to auto so that content can properly scroll.",
    "attributes": [
      {
        "name": "layout-padding",
        "description": "Add the [layout-padding] attribute to make the content padded."
      }
    ]
  },
  {
    "name": "md-datepicker",
    "description": "md-datepicker> is a component used to select a single date. For information on how to configure internationalization for the date picker, see $mdDateLocaleProvider.",
    "attributes": [
      {
        "name": "md-min-date",
        "description": "Expression representing a min date (inclusive)."
      },
      {
        "name": "md-max-date",
        "description": "Expression representing a max date (inclusive)."
      },
      {
        "name": "md-date-filter",
        "description": "Function expecting a date and returning a boolean whether it can be selected or not."
      },
      {
        "name": "md-placeholder",
        "description": "The date input placeholder value."
      },
      {
        "name": "md-open-on-focus",
        "description": "When present, the calendar will be opened when the input is focused."
      },
      {
        "name": "md-is-open",
        "description": "Expression that can be used to open the datepicker's calendar on-demand.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-current-view",
        "description": "Default open view of the calendar pane. Can be either month or year."
      },
      {
        "name": "md-hide-icons",
        "description": "Determines which datepicker icons should be hidden. Note that this may cause the datepicker to not align properly with other components.",
        "type": "enum",
        "values": [
          "all",
          "calendar",
          "triangle"
        ]
      },
      {
        "name": "md-date-locale",
        "description": "Allows for the values from the $mdDateLocaleProvider to be ovewritten on a per-element basis."
      }
    ]
  },
  {
    "name": "md-dialog",
    "description": "<md-dialog> - The dialog's template must be inside this element."
  },
  {
    "name": "md-divider",
    "description": "Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.",
    "attributes": [
      {
        "name": "md-inset",
        "description": "Add this attribute to activate the inset divider style.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      }
    ]
  },
  {
    "name": "md-fab-actions",
    "description": "The <md-fab-actions> directive is used inside of a <md-fab-speed-dial> or <md-fab-toolbar> directive to mark an element (or elements) as the actions and setup the proper event listeners."
  },
  {
    "name": "md-fab-speed-dial",
    "description": "The <md-fab-speed-dial> directive is used to present a series of popup elements (usually <md-button>s) for quick access to common actions.",
    "attributes": [
      {
        "name": "md-direction",
        "description": "From which direction you would like the speed dial to appear relative to the trigger element."
      },
      {
        "name": "md-open",
        "description": "Programmatically control whether or not the speed-dial is visible."
      }
    ]
  },
  {
    "name": "md-fab-toolbar",
    "description": "The <md-fab-toolbar> directive is used to present a toolbar of elements (usually <md-button>s) for quick access to common actions when a floating action button is activated (via click or keyboard navigation).",
    "attributes": [
      {
        "name": "md-direction",
        "description": "From which direction you would like the toolbar items to appear relative to the trigger element. Supports left and right directions."
      },
      {
        "name": "md-open",
        "description": "Programmatically control whether or not the toolbar is visible."
      }
    ]
  },
  {
    "name": "md-grid-list",
    "description": "Grid lists are an alternative to standard list views. Grid lists are distinct from grids used for layouts and other visual presentations.",
    "attributes": [
      {
        "name": "md-cols",
        "description": "Number of columns in the grid.",
        "type": "number"
      },
      {
        "name": "md-row-height",
        "description": ""
      },
      {
        "name": "md-gutter",
        "description": "The amount of space between tiles in CSS units (default 1px)"
      },
      {
        "name": "md-on-layout",
        "description": "Expression to evaluate after layout. Event object is available as $event, and contains performance information."
      }
    ]
  },
  {
    "name": "md-grid-tile",
    "description": "Tiles contain the content of an md-grid-list. They span one or more grid cells vertically or horizontally, and use md-grid-tile-{footer,header} to display secondary content.",
    "attributes": [
      {
        "name": "md-colspan",
        "description": "The number of columns to span (default 1). Cannot exceed the number of columns in the grid. Supports interpolation.",
        "type": "number"
      },
      {
        "name": "md-rowspan",
        "description": "The number of rows to span (default 1). Supports interpolation.",
        "type": "number"
      }
    ]
  },
  {
    "name": "md-icon",
    "description": "The md-icon directive makes it easier to use vector-based icons in your app (as opposed to raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.",
    "attributes": [
      {
        "name": "md-font-icon",
        "description": "String name of CSS icon associated with the font-face will be used to render the icon. Requires the fonts and the named CSS styles to be preloaded."
      },
      {
        "name": "md-font-set",
        "description": "CSS style name associated with the font library; which will be assigned as the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname; internally use $mdIconProvider.fontSet(<alias>) to determine the style name."
      },
      {
        "name": "md-svg-src",
        "description": "String URL (or expression) used to load, cache, and display an external SVG."
      },
      {
        "name": "md-svg-icon",
        "description": "md-svg-icon String name used for lookup of the icon from the internal cache; interpolated strings or expressions may also be used. Specific set names can be used with the syntax <set name>:<icon name>."
      },
      {
        "name": "aria-label",
        "description": "Labels icon for accessibility. If an empty string is provided, icon will be hidden from accessibility layer with aria-hidden='true'. If there's no aria-label on the icon nor a label on the parent element, a warning will be logged to the console."
      },
      {
        "name": "alt",
        "description": "Labels icon for accessibility. If an empty string is provided, icon will be hidden from accessibility layer with aria-hidden='true'. If there's no alt on the icon nor a label on the parent element, a warning will be logged to the console."
      }
    ]
  },
  {
    "name": "md-input-container",
    "description": "<md-input-container> is the parent of any input or textarea element.",
    "attributes": [
      {
        "name": "md-is-error",
        "description": "When the given expression evaluates to true, the input container will go into error state. Defaults to erroring if the input has been touched and is invalid."
      },
      {
        "name": "md-no-float",
        "description": "When present, placeholder attributes on the input will not be converted to floating labels.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      }
    ]
  },
  {
    "name": "md-list",
    "description": "The <md-list> directive is a list container for 1..n <md-list-item> tags."
  },
  {
    "name": "md-list-item",
    "description": "A md-list-item element can be used to represent some information in a row."
  },
  {
    "name": "md-menu",
    "description": "Menus are elements that open when clicked. They are useful for displaying additional options within the context of an action.Every md-menu must specify exactly two child elements. The first element is what is left in the DOM and is used to open the menu.The second element is the md-menu-content element which represents the contents of the menu when it is open.",
    "attributes": [
      {
        "name": "md-position-mode",
        "description": "The position mode in the form of x, y. Default value is target,target. Right now the x axis also supports target-right."
      },
      {
        "name": "md-offset",
        "description": "An offset to apply to the dropdown after positioning x, y. Default value is 0,0."
      }
    ]
  },
  {
    "name": "md-menu-bar",
    "description": "Menu bars are containers that hold multiple menus. They change the behavior and appearence of the md-menu directive to behave similar to an operating system provided menu."
  },
  {
    "name": "md-nav-bar",
    "description": "The <md-nav-bar> directive renders a list of material tabs that can be used for top-level page navigation. Unlike <md-tabs>, it has no concept of a tab body and no bar pagination.",
    "attributes": [
      {
        "name": "mdSelectedNavItem",
        "description": "The name of the current tab; this must match the name attribute of <md-nav-item>"
      },
      {
        "name": "mdNoInkBar",
        "description": "If set to true, the ink bar will be hidden.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "navBarAriaLabel",
        "description": "An aria-label for the nav-bar"
      }
    ]
  },
  {
    "name": "md-nav-item",
    "description": "<md-nav-item> describes a page navigation link within the <md-nav-bar> component. It renders an md-button as the actual link.",
    "attributes": [
      {
        "name": "mdNavClick",
        "description": "Function which will be called when the link is clicked to change the page. Renders as an ng-click."
      },
      {
        "name": "mdNavHref",
        "description": "url to transition to when this link is clicked. Renders as an ng-href."
      },
      {
        "name": "mdNavSref",
        "description": "Ui-router state to transition to when this link is clicked. Renders as a ui-sref."
      },
      {
        "name": "srefOpts",
        "description": "Ui-router options that are passed to the $state.go() function. "
      },
      {
        "name": "name",
        "description": "The name of this link. Used by the nav bar to know which link is currently selected."
      }
    ]
  },
  {
    "name": "md-progress-circular",
    "description": "The circular progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content.",
    "attributes": [
      {
        "name": "md-mode",
        "description": "Select from one of two modes: 'determinate' and 'indeterminate'."
      },
      {
        "name": "value",
        "description": "In determinate mode, this number represents the percentage of the circular progress. Default: 0",
        "type": "number"
      },
      {
        "name": "md-diameter",
        "description": "This specifies the diameter of the circular progress. The value should be a pixel-size value (eg '100'). If this attribute is not present then a default value of '50px' is assumed.",
        "type": "number"
      }
    ]
  },
  {
    "name": "md-progress-linear",
    "description": "The linear progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content.",
    "attributes": [
      {
        "name": "md-mode",
        "description": "Select from one of four modes: determinate, indeterminate, buffer or query."
      },
      {
        "name": "value",
        "description": "In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0",
        "type": "number"
      },
      {
        "name": "md-buffer-value",
        "description": "In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0",
        "type": "number"
      }
    ]
  }
]
