[
  {
    "name": "rad-combo",
    "attributes": [
      {
        "name": "rad-text",
        "description": "You can bind rad text, so combo box will show binded data instead of loading data, until user opens it."
      },
      {
        "name": "rad-datasource",
        "description": "Bind this to kendo data source you've in view model."
      },
      {
        "name": "rad-value-field-name",
        "description": "Property of dto to be assigned into ng-model when user selects."
      },
      {
        "name": "rad-text-field-name",
        "description": "Property of dto to be displayed to user. It can be overrided using item-template. Note that this field will be used for filtering when user searchs in combo box."
      },
      {
        "name": "rad-virtual-entity-loader",
        "description": "Bind this to a method which accepts args : { id : any } to enable Data|UI virtualiztion whenever you've large sets of data. At that function you should return a promise, which resolves into an entity with that id."
      },
      {
        "name": "rad-on-init",
        "description": "Bind this to a method which accepts args : { comboBoxOptions: comboBoxOptions }. You can customize all aspects of your combo box there."
      },
      {
        "name": "k-placeholder",
        "description": "The hint displayed by the widget when it is empty."
      },
      {
        "name": "k-min-length",
        "description": "The minimum number of characters the user must type before a search is performed. Set to higher value than 1 if the search could match a lot of items."
      },
      {
        "name": "k-clear-button",
        "description": "Unless this options is set to false, a button will appear when hovering the widget."
      },
      {
        "name": "k-enable",
        "description": "If set to false the widget will be disabled and will not allow user input."
      },
      {
        "name": "k-filter",
        "description": "The filtering method used to determine the suggestions for the current value.",
        "type": "enum",
        "values": [
          "'contains'",
          "'startswith'",
          "'endswith'"
        ]
      },
      {
        "name": "k-ignore-case",
        "description": "If set to false case-sensitive search will be performed to find suggestions. The widget performs case-insensitive searching by default."
      }
    ]
  },
  {
    "name": "rad-grid",
    "attributes": [
      {
        "name": "rad-datasource",
        "description": "Bind this to kendo data source you've in view model."
      },
      {
        "name": "rad-on-init",
        "description": "Bind this to a method which accepts args : { gridOptions: gridOptions }. You can customize all aspects of your data grid there."
      },
      {
        "name": "k-navigatable",
        "description": "If set to true the use could navigate the widget using the keyboard navigation."
      },
      {
        "name": "k-reorderable",
        "description": "If set to true the user could reorder the columns by dragging their header cells. Multi-level headers allow reordering only in same level."
      },
      {
        "name": "k-resizable",
        "description": "If set to true, users can resize columns by dragging the edges (resize handles) of their header cells. Users can also auto-fit a column by double-clicking its resize handle. In this case the column will assume the smallest possible width, which allows the column content to fit without wrapping."
      },
      {
        "name": "k-sortable",
        "description": "If set to true the user could sort the grid by clicking the column header cells."
      }
    ]
  },
  {
    "name": "ng-outlet",
    "description": "The directive that identifies where the Router should render its Components."
  },
  {
    "name": "a",
    "attributes": [
      {
        "name": "ng-link",
        "description": "<a ng-link=\"[ 'ViewModelName' , { arg1 : 'value' }]\">Title</a> for binding a clickable HTML element to a route, via a Link Parameters Array."
      }
    ]
  },
  {
    "name": "persian-date-picker",
    "description": "This Date picker work with solar based calendar. It accepts ng-model. To configure date or date/time see is-date-time attribute.",
    "attributes": [
      {
        "name": "is-date-time",
        "values": [
          "true",
          "false"
        ],
        "type": "boolean",
        "description": "Show/accept date or date time. default: false >> date only."
      }
    ]
  },
  {
    "name": "dto-form",
    "description": "Use dto-form instead of ng-form when you're working wit dto. It requires ng-model. <dto-form name='customerForm' ng-model='...'></dto-form>"
  },
  {
    "name": "error-messages",
    "description": "Shows errors to user. <error-messages field='customerForm.LastName'><div ng-message='required'>Last name is required</div><error-messages>",
    "attributes": [
      {
        "name": "field",
        "description": "Set this to formName.fieldName you're going to show its errors. for example customerForm.LastName"
      }
    ]
  },
  {
    "name": "element-mover",
    "description": "Set element-selector and predicate. Whenever predicate resolves into true, it will move element into this element-mover",
    "attributes": [
      {
        "name": "predicate",
        "description": "For example vm.x == true"
      },
      {
        "name": "element-selector",
        "description": "For example #someElement"
      }
    ]
  },
  {
    "name": "md-button",
    "description": "<md-button> is a button directive with optional ink ripples (default enabled). If you supply a href or ng-href attribute, it will become an <a> element. Otherwise, it will become a <button> element.",
    "attributes": [
      {
        "name": "md-no-ink",
        "type": "boolean",
        "description": "If present, disable ripple ink effects.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-ripple-size",
        "description": "Overrides the default ripple size logic.",
        "type": "enum",
        "values": [
          "full",
          "partial",
          "auto"
        ]
      }
    ]
  },
  {
    "name": "md-autocomplete",
    "description": "<md-autocomplete> is a special input component with a drop-down of all possible matches to a custom query.",
    "attributes": [
      {
        "name": "md-items",
        "description": "An expression in the format of item in results to iterate over matches for your search.The results expression can be also a function, which returns the results synchronously or asynchronously (per Promise)."
      },
      {
        "name": "md-selected-item-change",
        "description": "An expression to be run each time a new item is selected."
      },
      {
        "name": "md-search-text-change",
        "description": "An expression to be run each time the search text updates."
      },
      {
        "name": "md-search-text",
        "description": "A model to bind the search query text to."
      },
      {
        "name": "md-selected-item",
        "description": "A model to bind the selected item to."
      },
      {
        "name": "md-item-text",
        "description": "An expression that will convert your object to a single string."
      },
      {
        "name": "md-no-cache",
        "type": "boolean",
        "description": "Disables the internal caching that happens in autocomplete.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-require-match",
        "type": "boolean",
        "description": "When set to true, the autocomplete will add a validator, which will evaluate to false, when no item is currently selected.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-min-length",
        "type": "number",
        "description": "Specifies the minimum length of text before autocomplete will make suggestions."
      },
      {
        "name": "md-delay",
        "type": "number",
        "description": "Specifies the amount of time (in milliseconds) to wait before looking for results."
      },
      {
        "name": "md-clear-button",
        "type": "boolean",
        "description": "Whether the clear button for the autocomplete input should show up or not.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-autofocus",
        "type": "boolean",
        "description": "If true, the autocomplete will be automatically focused when a $mdDialog, $mdBottomsheet or $mdSidenav, which contains the autocomplete, is opening.Also the autocomplete will immediately focus the input element.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-no-asterisk",
        "type": "boolean",
        "description": "When present, asterisk will not be appended to the floating label.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-autoselect",
        "type": "boolean",
        "description": "If set to true, the first item will be automatically selected in the dropdown upon open.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-menu-class",
        "description": "This will be applied to the dropdown menu for styling."
      },
      {
        "name": "md-floating-label",
        "description": "This will add a floating label to autocomplete and wrap it in md-input-container."
      },
      {
        "name": "md-input-name",
        "description": "The name attribute given to the input element to be used with FormController."
      },
      {
        "name": "md-select-on-focus",
        "description": "When present the inputs text will be automatically selected on focus."
      },
      {
        "name": "md-input-id",
        "description": "An ID to be added to the input element."
      },
      {
        "name": "md-input-minlength",
        "type": "number",
        "description": "The minimum length for the input's value for validation."
      },
      {
        "name": "md-input-maxlength",
        "type": "number",
        "description": "The maximum length for the input's value for validation."
      },
      {
        "name": "md-select-on-match",
        "type": "boolean",
        "description": "When set, autocomplete will automatically select exact the item if the search text is an exact match.Exact match means that there is only one match showing up.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-match-case-insensitive",
        "type": "boolean",
        "description": "When set and using md-select-on-match, autocomplete will select on case-insensitive match.",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-escape-options",
        "type": "enum",
        "description": "Override escape key logic. Default is blur clear.",
        "values": [
          "blur",
          "clear",
          "none"
        ]
      },
      {
        "name": "md-dropdown-items",
        "description": "Specifies the maximum amount of items to be shown in the dropdown.When the dropdown doesn't fit into the viewport, the dropdown will shrink as less as possible.."
      },
      {
        "name": "md-dropdown-position",
        "type": "enum",
        "description": "Overrides the default dropdown position",
        "values": [
          "bottom",
          "top"
        ]
      }
    ]
  },
  {
    "name": "md-calendar",
    "description": "<md-calendar> is a component that renders a calendar that can be used to select a date. It is a part of the <md-datepicker> pane, however it can also be used on it's own.",
    "attributes": [
      {
        "name": "md-min-date",
        "description": "Expression representing the minimum date."
      },
      {
        "name": "md-max-date",
        "description": "Expression representing the maximum date."
      },
      {
        "name": "md-date-filter",
        "description": "Function expecting a date and returning a boolean whether it can be selected or not."
      }
    ]
  },
  {
    "name": "md-checkbox",
    "attributes": [
      {
        "name": "name",
        "description": "Property name of the form under which the control is published."
      },
      {
        "name": "md-no-ink ",
        "description": "Use of attribute indicates use of ripple ink effects.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "aria-label",
        "description": "Adds label to checkbox for accessibility. Defaults to checkbox's text. If no default text is found, a warning will be logged."
      },
      {
        "name": "md-indeterminate",
        "description": "This determines when the checkbox should be rendered as 'indeterminate'. If a truthy expression or no value is passed in the checkbox renders in the md-indeterminate state. If falsy expression is passed in it just looks like a normal unchecked checkbox. The indeterminate, checked, and unchecked states are mutually exclusive. A box cannot be in any two states at the same time. Adding the 'md-indeterminate' attribute overrides any checked/unchecked rendering logic. When using the 'md-indeterminate' attribute use 'ng-checked' to define rendering logic instead of using 'ng-model'."
      }
    ]
  },
  {
    "name": "md-chip",
    "description": "<md-chip> is a component used within <md-chips> and is responsible for rendering individual chips."
  },
  {
    "name": "md-chips",
    "description": "<md-chips> is an input component for building lists of strings or objects. The list items are displayed as 'chips'. This component can make use of an <input> element or an <md-autocomplete> element.",
    "attributes": [
      {
        "name": "md-transform-chip",
        "description": "An expression of form myFunction($chip) that when called expects one of the following return values:an object representing the $chip input string undefined to simply add the $chip input string, or null to prevent the chip from being appended."
      },
      {
        "name": "md-require-match",
        "description": "If true, and the chips template contains an autocomplete, only allow selection of pre-defined chips (i.e. you cannot add new ones).",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-removable",
        "description": "Enables or disables the deletion of chips through the removal icon or the Delete/Backspace key. Defaults to true.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "readonly",
        "description": "Disables list manipulation (deleting or adding list items), hiding the input and delete buttons. If no ng-model is provided, the chips will automatically be marked as readonly.When md-removable is not defined, the md-remove behavior will be overwritten and disabled.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-enable-chip-edit",
        "description": "Set this to true to enable editing of chip contents. The user can go into edit mode with pressing space, enter, or double clicking on the chip. Chip edit is only supported for chips with basic template."
      },
      {
        "name": "md-max-chips",
        "description": "The maximum number of chips allowed to add through user input.The validation property md-max-chips can be used when the max chips amount is reached.",
        "type": "number"
      },
      {
        "name": "md-add-on-blur",
        "description": "When set to true, remaining text inside of the input will be converted into a new chip on blur.",
        "type": "boolean",
        "values": [
          "true",
          "false"
        ]
      },
      {
        "name": "md-on-add",
        "description": "An expression which will be called when a chip has been added."
      },
      {
        "name": "md-on-remove",
        "description": "An expression which will be called when a chip has been removed."
      },
      {
        "name": "md-on-select",
        "description": "An expression which will be called when a chip is selected."
      },
      {
        "name": "input-aria-label",
        "description": "A string read by screen readers to identify the input."
      },
      {
        "name": "container-hint",
        "description": "A string read by screen readers informing users of how to navigate the chips. Used in readonly mode."
      },
      {
        "name": "delete-button-label",
        "description": "A label for the delete button. Also hidden and read by screen readers."
      },
      {
        "name": "md-separator-keys",
        "description": "An array of key codes used to separate chips."
      },
      {
        "name": "md-chip-append-delay",
        "description": "The number of milliseconds that the component will select a newly appended chip before allowing a user to type into the input. This is necessary for keyboard accessibility for screen readers. It defaults to 300ms and any number less than 300 can cause issues with screen readers (particularly JAWS and sometimes NVDA)."
      }
    ]
  },
  {
    "name": "md-contact-chips",
    "description": "<md-contact-chips> is an input component based on md-chips and makes use of an md-autocomplete element. The component allows the caller to supply a query expression which returns a list of possible contacts.",
    "attributes": [
      {
        "name": "md-contacts",
        "description": "An expression expected to return contacts matching the search test, $query. If this expression involves a promise, a loading bar is displayed while waiting for it to resolve."
      },
      {
        "name": "md-contact-name",
        "description": "The field name of the contact object representing the contact's name."
      },
      {
        "name": "md-contact-email",
        "description": "The field name of the contact object representing the contact's email address."
      },
      {
        "name": "md-contact-image",
        "description": "The field name of the contact object representing the contact's image."
      },
      {
        "name": "md-min-length",
        "description": "Specifies the minimum length of text before autocomplete will make suggestions.",
        "type": "number"
      },
      {
        "name": "filter-selected",
        "description": "Whether to filter selected contacts from the list of suggestions shown in the autocomplete."
      }
    ]
  },
  {
        "name": "md-content",
        "description": "The <md-content> directive is a container element useful for scrollable content. It achieves this by setting the CSS overflow property to auto so that content can properly scroll.",
        "attributes": [
            {
                "name": "layout-padding",
                "description": "Add the [layout-padding] attribute to make the content padded."
            }
        ]
    }
]
